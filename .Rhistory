access_url = "https://webapi.ersteapihub.com/api/csas/sandbox/v3/netbanking"
auth <- POST(authorize_url,
body=list(
grant_type="authorization_code",
code="test-code",
client_id=cli_key,
client_secret=cli_secret
),
encode='form',
config=list(
add_headers("Content-Type" = "application/x-www-form-urlencoded"))
)
token <- content(auth)$access_token
token <- paste('Bearer ',token,sep='')
# Credentials
headers <- c(API_key, token)
names(headers) <- c('WEB-API-key','Authorization')
# Get account list
acc <- GET(paste(access_url, '/my/accounts', sep=''),
add_headers(.headers = headers))
acc <- data.frame(content(acc))
acc
names(acc)
acc_list <- data.frame(id=acc$accounts.accountno.cz.iban, name=acc$accounts.productI18N)
acc_list
acc
View(acc)
str(acc)
acc <- GET(paste(access_url, '/my/accounts', sep=''),
add_headers(.headers = headers))
str(acc)
test <- content(acc)
str(test)
test <- content(acc)$accounts
str(test)
acc <- GET(paste(access_url, '/my/accounts', sep=''),
add_headers(.headers = headers))
acc <- content(acc)$accounts
acc_list <- data.table(
id=sapply(acc, function(x){x$accountno$cz-iban}),
product=sapply(acc, function(x){x$productI18N}),
type=sapply(acc, function(x){x$type}),
subtype=sapply(acc, function(x){x$subtype})
)
acc_list <- data.table(
id=sapply(acc, function(x){x$accountno$cz.iban}),
product=sapply(acc, function(x){x$productI18N}),
type=sapply(acc, function(x){x$type}),
subtype=sapply(acc, function(x){x$subtype})
)
acc_list
acc[[1]]
acc_list <- data.table(
id=sapply(acc, function(x){x$accountno$'cz-iban'}),
product=sapply(acc, function(x){x$productI18N}),
type=sapply(acc, function(x){x$type}),
subtype=sapply(acc, function(x){x$subtype})
)
acc_list
acc_list$name <- paste(acc_list$type, acc_list$subtype, sep=' - ')
acc_list
runApp('work/cs_shiny')
acc_list
id <- acc_list[1]$id
id
header
headers
trans <- GET(paste(access_url, '/my/accounts/',id,'/transactions', sep=''),
add_headers(.headers = headers))
str(trans)
trans <- content(trans)
str(trans)
trans
acc_list
Sys.Date()
diff.Date(Sys.Date(), 'year')
?diff.Date
diff.Date(Sys.Date(), 1)
diff.Date(Sys.Date(), lag=1)
Sys.Date()-90
id
datestart <- Sys.Date()-180
dateend <- Sys.Date()
trans <- GET(paste(access_url, '/my/accounts/',id,'/transactions?dateStart=',
datestart,
'&dateEnd=',
dateend,
sep=''),
add_headers(.headers = headers))
trans <- content(trans)$transactions
trans
id
trans <- GET(paste(access_url, '/my/accounts/',id,'/transactions?dateStart=',
datestart,
'&dateEnd=',
dateend,
sep=''),
add_headers(.headers = headers))
trans
GET(paste(access_url, 'cz/my/accounts/',id,'/transactions?dateStart=',
datestart,
'&dateEnd=',
dateend,
sep=''),
add_headers(.headers = headers))
paste(access_url, 'cz/my/accounts/',id,'/transactions?dateStart=',
datestart,
'&dateEnd=',
dateend,
sep='')
GET(paste(access_url, '/cz/my/accounts/',id,'/transactions?dateStart=',
datestart,
'&dateEnd=',
dateend,
sep=''),
add_headers(.headers = headers))
GET(paste(access_url, '/cz/my/accounts/',id,'/transactions?dateStart=',
datestart,
'&dateEnd=',
dateend,
sep='')
)
paste(access_url, '/cz/my/accounts/',id,'/transactions?dateStart=',
datestart,
'&dateEnd=',
dateend,
sep=''),
paste(access_url, '/cz/my/accounts/',id,'/transactions?dateStart=',
datestart,
'&dateEnd=',
dateend,
sep='')
acc_list
runApp('work/cs_shiny')
id
knit_with_parameters('~/work/blog/content/post/test.Rmd')
---
title: "Visualize your Strava activities with Shiny"
author: "Istvan Margitai"
date: '2018-03-23T21:13:14-05:00'
tags:
- Shiny
- Strava
- API
- R
- polylines
categories:
- R
- Shiny
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(collapse = TRUE)
```
The cycling season started and recently it came into my mind how I can use my Strava data in R to create maps and other visualization about my activities. My goal was to put together a Shiny application with a list of my activities and plot my routes on a map. I started by exploring the Strava API and first of all understand how web APIs work in general. Nowadays we meet quite often with the term RESTful API. What does it mean without going into the details? REST stems for
* __RE__presentational >> Web resources can be accessed and manipulated in textual form. For example in many cases APIs return JSON text files as responses to our requests.
* __S__tate >> Stateless protocol means that the server does not keep information about connection. For example the HTTP protocol is stateless and not interactive contrary to the FTP protocol which is stateful.
* __T__ransfer >> We access the specific web resources under different URLs and use usually HTTP methods (verbs like GET, POST, etc.) to access an modify elements or collections of resources. In our example collections are the set of Strava activities.
For more info about APIs, check [this](https://zapier.com/learn/apis/) great guide from Zapier.
The natural question arise that how REST APIs ensure the access to resources in a secured way. This is where the OAuth buzzword comes. It means Open Authorization protocol, which is used to give delegated access to web resources. Three counterparts are part of this authentication process:
Server >> In our case this is the Strava resource and authentication server
Client >> An application which wants to access the resources, practically this is the Shiny app
User >> The Strava user who "owns" the resources stored on the API server, practically the Strava users
The process starts with the registration of client application on the server. We can do this in our Strava settings under "My API Application". We will receive a Client ID and Client secret. With these two the Strava API can identify our client (the Shiny app). We have to be sure that the client secret is stored in the back end of our Shiny app. One solution is to write it into the .Renviron file, so when the R session starts we can refer to our OAuth credentials as environment variables. We also need to give a name to our application and define a Callback Domain. I run the shiny app on my local computer (so not on a public server) I gave localhost as Callback Domain.
So when the client calls the server and identifies itself with the Client ID and Client secret, the server grants an access token to the client. Now a Strava user opens the Shiny app in its browser and the app directs the user's browser to the Strava authentication page, where the user logs in with his username and password. Then the server redirects the user's browser to the Callback Domain, which is in our case the Shiny app, running on the localhost.
So let's see how we implement this in R step by step.
httr package is a great tool to work with URLs and HTTP verbs and URL query arguments.
?wget
??wget
?download.file
download.file("https://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data")
download.file("https://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data", destfile = "german_data.csv")
download.file("https://www.kaggle.com/uciml/german-credit/downloads/german_credit_data.csv", destfile = "german_data.csv")
?read.csc
?read.csv
download.file("https://www.kaggle.com/uciml/german-credit/downloads/german_credit_data.csv", destfile = "german_data.csv")
library{data.table}
library{data.table}
library(data.table)
setwd("/Home/work/blog/data")
library(data.table)
setwd("/home/work/blog/data")
download.file("https://www.kaggle.com/uciml/german-credit/downloads/german_credit_data.csv", destfile = "german_data.csv")
dt <- read.csv("german_data.csv")
head(dt)
sessionInfo()
library(data.table)
library(dplyr)
sessionInfo()
iris2 <- as_tibble(iris)
str(iris2)
iris2
iris2 %>% filter(Species == "setosa")
iris2 %>% arrange()
iris2 %>% arrange(Sepal.Length)
iris2 %>% arrange(desc(Sepal.Length))
iris2 %>% filter(Species = "setosa") %>% arrange(desc(Sepal.Length))
iris2 %>% filter(Species == "setosa") %>% arrange(desc(Sepal.Length))
?select
summarize(iris2)
summarise(iris2)
iris2
group_by(iris2, Species)
iris2
mtcars
select_all(mtcars, toupper
)
cars <- as_tibble(mtcars)
cars
test <- cars %>% group_by(cyl) %>% summarize(avg = mean(hp))
test
library(data.table)
library(xgboost)
# Load data ----
load('stage/dev.Rdata')
load('stage/test.Rdata')
# Corvert to xgb.DMatrix format
tr <- xgb.DMatrix(data = as.matrix(dev[, -"target", with=FALSE])
, label = dev$target)
te <- xgb.DMatrix(data = as.matrix(test[, -"target", with=FALSE])
, label = test$target)
# Variable selection based on feature importance ----
# https://cran.r-project.org/web/packages/xgboost/vignettes/xgboostPresentation.html
# https://xgboost.readthedocs.io/en/latest/R-package/xgboostPresentation.html
xgb <- xgboost(data = tr,
eta = 1,
max_depth = 6,
nround = 50,
verbose = 2,
objective = "binary:logistic",
booster = "gbtree",
eval_metric = "auc",
nthread = 4
)
xgb_importance <- xgb.importance(model=xgb)
print(xgb_importance)
xgb.plot.importance(importance_matrix = xgb_importance)
#xgb.save(model = xgb, 'artifacts/pre_trained.model')
#save(xgb_importance, file = 'artifacts/xgb_importance.Rdata')
# Validation ----
pred <- predict(xgb, tr)
pred <- ifelse(pred > 0.5, 1, 0)
sum(pred)
# Retrain then model with the top 6 features ----
features <- xgb_importance[1:6,]$Feature
setwd("~/work/credit_api")
library(data.table)
library(xgboost)
# Load data ----
load('stage/dev.Rdata')
load('stage/test.Rdata')
# Corvert to xgb.DMatrix format
tr <- xgb.DMatrix(data = as.matrix(dev[, -"target", with=FALSE])
, label = dev$target)
te <- xgb.DMatrix(data = as.matrix(test[, -"target", with=FALSE])
, label = test$target)
# Variable selection based on feature importance ----
# https://cran.r-project.org/web/packages/xgboost/vignettes/xgboostPresentation.html
# https://xgboost.readthedocs.io/en/latest/R-package/xgboostPresentation.html
xgb <- xgboost(data = tr,
eta = 1,
max_depth = 6,
nround = 50,
verbose = 2,
objective = "binary:logistic",
booster = "gbtree",
eval_metric = "auc",
nthread = 4
)
xgb_importance <- xgb.importance(model=xgb)
print(xgb_importance)
xgb.plot.importance(importance_matrix = xgb_importance)
#xgb.save(model = xgb, 'artifacts/pre_trained.model')
#save(xgb_importance, file = 'artifacts/xgb_importance.Rdata')
# Validation ----
pred <- predict(xgb, tr)
pred <- ifelse(pred > 0.5, 1, 0)
sum(pred)
# Retrain then model with the top 6 features ----
features <- xgb_importance[1:6,]$Feature
features
pred <- predict(xgb, te)
pred <- ifelse(pred > 0.5, 1, 0)
table(test$target, pred)
install.packages(pROC)
install.packages('pROC')
library(pROC)
roc(test$target, pred)
plot.roc(test$target, pred)
pred <- predict(xgb, te)
roc(test$target, pred)
plot.roc(test$target, pred)
pred <- predict(xgb, tr)
roc(dev$target, pred)
plot.roc(dev$target, pred)
2*0.8369-1
pred <- predict(xgb, te)
roc(test$target, pred)
plot.roc(test$target, pred)
2*0.7097-1
roc <- roc(test$target, pred)
roc
str(roc)
roc$auc
str(roc$auc)
2*roc$auc-1
pred <- predict(xgb, te)
roc <- roc(test$target, pred)
roc
2*roc$auc-1
plot.roc(test$target, pred)
2*0.778-1
2*0.8-1
library(data.table)
library(xgboost)
library(pROC)
# Load model
xgb.load('artifacts/pre_trained.model')
list <- xgb.importance(model=xgb)
?xgb.load
# Load model
xgb <- xgb.load('artifacts/pre_trained.model')
list <- xgb.importance(model=xgb)
list
str(xgb)
xgb_importance <- xgb.importance(model=xgb)
print(xgb_importance)
xgb.plot.importance(importance_matrix = xgb_importance)
xgb_importance <- xgb.importance(model=xgb)
print(xgb_importance)
xgb.plot.importance(importance_matrix = xgb_importance)
xgb.save(model = xgb, 'artifacts/pre_trained.model')
# Load model
xgb <- xgb.load('artifacts/pre_trained.model')
str(xgb)
xgb$handle
xgb.attributes()
xgb.model.dt.tree()
xgb.model.dt.tree(xgb)
# Load model
model <- xgb.load('artifacts/pre_trained.model')
model.extract()
model.frame()
library(data.table)
library(xgboost)
# Load data ----
load('stage/dev.Rdata')
load('stage/test.Rdata')
# Corvert to xgb.DMatrix format
tr <- xgb.DMatrix(data = as.matrix(dev[, -"target", with=FALSE])
, label = dev$target)
te <- xgb.DMatrix(data = as.matrix(test[, -"target", with=FALSE])
, label = test$target)
# Variable selection based on feature importance ----
# https://cran.r-project.org/web/packages/xgboost/vignettes/xgboostPresentation.html
# https://xgboost.readthedocs.io/en/latest/R-package/xgboostPresentation.html
xgb <- xgboost(data = tr,
eta = 1,
max_depth = 6,
nround = 50,
verbose = 2,
objective = "binary:logistic",
booster = "gbtree",
eval_metric = "auc",
nthread = 4
)
xgb_importance <- xgb.importance(model=xgb)
print(xgb_importance)
xgb_importance <- xgb.importance(model=xgb)
save(xgb_importance, 'artifacts/importance.Rdata')
save(xgb_importance, file='artifacts/importance.Rdata')
png <- xgb.plot.importance(importance_matrix = xgb_importance)
# Save feature importance plot
png <- xgb.plot.importance(importance_matrix = xgb_importance[1:30])
str(png)
sink('artifacts/importance.png')
xgb.plot.importance(importance_matrix = xgb_importance[1:30])
sink()
xgb.plot.importance(importance_matrix = xgb_importance[1:30])
png('artifacts/importance.png')
xgb.plot.importance(importance_matrix = xgb_importance[1:30])
dev.off()
# Save the model
xgb.save(model = xgb, 'artifacts/pre_trained.model')
# Save feature importance list
xgb_importance <- xgb.importance(model=xgb)
save(xgb_importance, file='artifacts/importance.Rdata')
# Save feature importance plot (top 30)
png('artifacts/importance.png')
xgb.plot.importance(importance_matrix = xgb_importance[1:30])
dev.off()
library(jsonlite)
# Load model
model <- xgb.load('artifacts/pre_trained.model')
imp <- load('artifacts/importance.Rdata')
library(plumber)
#setwd('~/work')
r <- plumb('plumber.R')
r$run(host='0.0.0.0', port=8000)
install.packages('plumber')
library(plumber)
#setwd('~/work')
r <- plumb('plumber.R')
r$run(host='0.0.0.0', port=8000)
library(plumber)
#setwd('~/work')
r <- plumb('plumber.R')
r$run(host='0.0.0.0', port=8000)
xgb_importance
png('artifacts/importance.png')
dev.off()
install.packages('png')
library(png)
??png
test <- readPNG('artifacts/importance.png')
display(test)
test
??png
xgb.plot.importance(xgb_importance)
xgb.plot.importance(xgb_importance[1:30])
library(plumber)
#setwd('~/work')
r <- plumb('plumber.R')
r$run(host='0.0.0.0', port=8000)
?httr
library(httr)
library(jsonlite)
install.packages('httr')
library(httr)
?httr
url <- 'localhost:8000'
resource <- '/score'
load('stage/test.Rdata')
r <- GET(paste0(url, resource), body = list(tartget = c(1,2,3)))
paste0(url, resource)
resource <- '/feature/list'
r <- GET(paste0(url, resource), body = list(tartget = c(1,2,3)))
#url <- 'http://ec2-54-93-75-75.eu-central-1.compute.amazonaws.com:8000'
url <- 'http://localhost:8000'
GET(paste0(url, resource))
paste0(url, resource)
resource <- '/features/list'
GET(paste0(url, resource))
r <- GET(paste0(url, resource))
r
str(r)
resp <- content(r)$msg
r <- GET(paste0(url, resource))
resp <- content(r)$msg
resp <- content(r)
resp
library(jsonlite)
resource <- '/features/list'
r <- GET(paste0(url, resource))
resp <- fromJSON(content(r))
resource <- '/features/list'
r <- GET(paste0(url, resource))
resp <- fromJSON(content(r))
r
resource <- '/features/list'
r <- GET(paste0(url, resource))
r
str(r)
content(r)
data.frame(content(r))
unlist(content(r))
?content
content(r, type = 'JSON')
content(r, type = 'fromJSON')
content(r, type = 'application/json')
r <- GET(paste0(url, resource))
r <- content(r, type = 'application/json')
r
as.data.frame(r)
t <- as.data.frame(r)
unlist(r)
r <- content(r, as = "raw")
r <- GET(paste0(url, resource))
r <- content(r, as = "raw")
?fromJSON
r <- GET(paste0(url, resource)) %>%
content(as = "raw") %>%
fromJSON(simplifyDataFrame = T)
library(magrittr)
r <- GET(paste0(url, resource)) %>%
content(as = "raw") %>%
fromJSON(simplifyDataFrame = T)
r <- GET(paste0(url, resource)) %>%
content(as = "raw")
fromJSON(r)
r <- GET(paste0(url, resource)) %>%
content(as = "text")
r <- GET(paste0(url, resource)) %>%
content(as = "text", encoding = 'UTF-8')
r <- GET(paste0(url, resource)) %>%
content(as = "text", encoding = 'UTF-8') %>%
fromJSON(simplifyDataFrame = T)
r
test
names(test)
r <- GET(paste0(url, resource), body = list(target = c(1,2,3))) %>%
content(as = "text", encoding = 'UTF-8') %>%
fromJSON(simplifyDataFrame = T)
resource <- '/score'
r <- GET(paste0(url, resource), body = list(target = c(1,2,3))) %>%
content(as = "text", encoding = 'UTF-8') %>%
fromJSON(simplifyDataFrame = T)
r
list(target = c(1,2,3))
resource <- '/score'
r <- POST(paste0(url, resource), body = list(target = c(1,2,3))) %>%
content(as = "text", encoding = 'UTF-8') %>%
fromJSON(simplifyDataFrame = T)
